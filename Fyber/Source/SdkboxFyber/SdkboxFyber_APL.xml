<?xml version="1.0" encoding="utf-8"?>
<root xmlns:android="http://schemas.android.com/apk/res/android">
  <init>
	   <log text="SDKBOX Fyber APL Init"/>

	   <setBoolFromProperty result="bDisableVideoPreCaching" ini="Engine" section="/Script/SdkboxFyber.SdkboxFyberSettings" property="DisableVideoPreCaching"      default="false"/>
     <setIntFromProperty  result="iCloseButtonDelay"       ini="Engine" section="/Script/SdkboxFyber.SdkboxFyberSettings" property="VideoCloseButtonDelayLength" default="0"/>
     <setBoolFromProperty result="bToastMessages"          ini="Engine" section="/Script/SdkboxFyber.SdkboxFyberSettings" property="ToastMessages"               default="false"/>

     <setStringFromProperty result="sFyberAppId"         ini="Engine" section="/Script/SdkboxFyber.SdkboxFyberSettings" property="AppIDAndroid" default=""/>
     <setStringFromProperty result="sFyberSecurityToken" ini="Engine" section="/Script/SdkboxFyber.SdkboxFyberSettings" property="TokenAndroid" default=""/>
  </init>

  <androidManifestUpdates>
      <if condition="bDisableVideoPreCaching">
          <false>
              <setElement result="serviceAddition" value="service"/>
              <addAttribute tag="$serviceAddition" name="android:name" value="com.fyber.cache.CacheVideoDownloadService"/>
              <addAttribute tag="$serviceAddition" name="android:exported" value="false"/>
              <addElement tag="application" name="serviceAddition"/>
          </false>
      </if>

      <setElement result="RewardedVideoActivity" value="activity"/>
      <addAttribute  tag="$RewardedVideoActivity"  name="android:name"  value="com.fyber.ads.videos.RewardedVideoActivity"/>
      <addAttribute  tag="$RewardedVideoActivity"  name="android:configChanges" value="screenSize|orientation"/>
      <addAttribute  tag="$RewardedVideoActivity"  name="android:hardwareAccelerated" value="true"/>
      <addAttribute  tag="$RewardedVideoActivity"  name="android:theme" value="@android:style/Theme.Translucent"/>
      <addElement    tag="application"         name="RewardedVideoActivity"/>

	    <setElement result="OfferWallActivity" value="activity"/>
      <addAttribute  tag="$OfferWallActivity"  name="android:name"  value="com.fyber.ads.ofw.OfferWallActivity"/>
      <addAttribute  tag="$OfferWallActivity"  name="android:configChanges" value="screenSize|orientation"/>
      <addElement    tag="application"         name="OfferWallActivity"/>

      <setElement result="InterstitialActivity" value="activity"/>
      <addAttribute  tag="$InterstitialActivity"  name="android:name"  value="com.fyber.ads.interstitials.InterstitialActivity"/>
      <addAttribute  tag="$InterstitialActivity"  name="android:configChanges" value="screenSize|orientation"/>
      <addAttribute  tag="$InterstitialActivity"  name="android:theme" value="@android:style/Theme.Translucent"/>
      <addElement    tag="application"         name="InterstitialActivity"/>

      <setElement result="CacheVideoDownloadService" value="activity"/>
      <addAttribute  tag="$CacheVideoDownloadService"  name="android:name"  value="com.fyber.cache.CacheVideoDownloadService"/>
      <addAttribute  tag="$CacheVideoDownloadService"  name="android:exported" value="false"/>
      <addElement    tag="application"         name="CacheVideoDownloadService"/>

      <addPermission android:name="android.permission.INTERNET" />
      <addPermission android:name="android.permission.READ_PHONE_STATE" />
      <addPermission android:name="android.permission.ACCESS_NETWORK_STATE" />
      <addPermission android:name="android.permission.ACCESS_WIFI_STATE" />
      <addPermission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />

      <setElement result="UnityAdsActivity" value="activity"/>
      <addAttribute tag="$UnityAdsActivity"  name="android:name" value="com.unity3d.ads.android.view.UnityAdsFullscreenActivity"/>
      <addAttribute tag="$UnityAdsActivity"  name="android:configChanges" value="fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen"/>
      <addAttribute tag="$UnityAdsActivity"  name="android:theme" value="@android:style/Theme.NoTitleBar.Fullscreen"/>
      <addAttribute tag="$UnityAdsActivity"  name="android:hardwareAccelerated" value="true"/>
      <addElement    tag="application"       name="UnityAdsActivity"/>

      <setElement result="CloseButtonDelayMetaData" value="meta-data"/>
      <addAttribute tag="$CloseButtonDelayMetaData" name="android:name" value="FYBVideoPlayerOptionCloseButtonDelay"/>
      <addAttribute tag="$CloseButtonDelayMetaData" name="android:value" value="$I(iCloseButtonDelay)"/>
      <addElement tag="application" name="CloseButtonDelayMetaData"/>

  </androidManifestUpdates>

  <AARImports>
    <insertValue value="repositories $S(PluginDir)/../../Source/ThirdParty/AndroidRepository"/>
    <insertNewline/>
    <insert>
com.fyber,fyber-sdk,8.6.0
com.fyber,fyber-annotations,1.2.0
com.fyber,fyber-annotations-compiler,1.3.2 
com.fyber.mediation,unityads,2.0.5-r1
    </insert>
  </AARImports>

  <buildXmlPropertyAdditions>
    <insert>
<![CDATA[
    <property name="java.target" value="1.7" />
    <property name="java.source" value="1.7" />
]]>
    </insert>
  </buildXmlPropertyAdditions>

  <gameActivityImportAdditions>
    <insert>
import com.fyber.Fyber;
import com.fyber.requesters.RewardedVideoRequester;
import com.fyber.ads.AdFormat;
import com.fyber.ads.videos.RewardedVideoActivity;
import com.fyber.requesters.RequestCallback;
import com.fyber.requesters.RequestError;

import com.fyber.requesters.VirtualCurrencyCallback;
import com.fyber.requesters.VirtualCurrencyRequester;
import com.fyber.currency.VirtualCurrencyResponse;
import com.fyber.currency.VirtualCurrencyErrorResponse;

import com.fyber.utils.FyberLogger;
import com.fyber.annotations.FyberSDK;
    </insert>
  </gameActivityImportAdditions>

  <gameActivityPostImportAdditions>
    <insert>
@FyberSDK
    </insert>
  </gameActivityPostImportAdditions>


  <gameActivityOnCreateAdditions>
    <if condition="bDistribution">
      <false>
        <insert>
          FyberLogger.enableLogging(true);    
        </insert>
      </false>
    </if>
  </gameActivityOnCreateAdditions>

  <gameActivityOnStartAdditions>
    <insert>
  
    </insert>
  </gameActivityOnStartAdditions>

  <gameActivityOnStopAdditions>
    <insert>
  
    </insert>
  </gameActivityOnStopAdditions>

  <gameActivityOnPauseAdditions>
    <insert>
    
    </insert>
  </gameActivityOnPauseAdditions>

  <gameActivityOnResumeAdditions>
    <insert>
Log.debug("Fyber SDK initialization...");

String sFyberAppId         = "</insert><insertValue value="$S(sFyberAppId)" /><insert>";
String sFyberSecurityToken = "</insert><insertValue value="$S(sFyberSecurityToken)" /><insert>";

try
{
  Fyber.with(sFyberAppId, this).withSecurityToken(sFyberSecurityToken).start();
}
catch(Exception ex)
{
  Log.debug(ex.getMessage());
}     
    </insert>
  </gameActivityOnResumeAdditions>

<gameActivityClassAdditions>
    <insert>
volatile Intent gFyberRewardedVideoIntent = null;

static final int REWARDED_VIDEO_REQUEST_CODE = 9340;

public native void nativeFyberOnAdAvailable();
public native void nativeFyberOnAdNotAvailable();
public native void nativeFyberOnRequestError();
public native void nativeFyberShowRewardedVideo();

public native void nativeFyberRewardedVideoFinished();
public native void nativeFyberRewardedVideoAborted();
public native void nativeFyberRewardedVideoError();
public native void nativeFyberRewardedVideoUserEngaged();

public native void nativeFyberVirtualCurrencyRewardOnSuccess(String currencyId, String currencyName, double deltaOfCoins, String latestTransactionId);
public native void nativeFyberVirtualCurrencyRewardOnError(String erroCode, String errorType, String errorMessage);
public native void nativeFyberVirtualCurrencyRewardOnRequestError();

public void AndroidThunkJava_FyberInit(String appID, String securityToken)
{
  String sFyberAppId         = "</insert><insertValue value="$S(sFyberAppId)" /><insert>";
  String sFyberSecurityToken = "</insert><insertValue value="$S(sFyberSecurityToken)" /><insert>";

  Log.debug("Fyber SDK initialization app ID:" + sFyberAppId +  " security token:" + sFyberSecurityToken + "...");

  try
  {
    Fyber.with(sFyberAppId, this).withSecurityToken(sFyberSecurityToken).start();
  }
  catch(Exception ex)
  {
    Log.debug(ex.getMessage());
  }  
}

public void AndroidThunkJava_FyberRequestVideo(String placementID)
{
    Log.debug("Fyber SDK requesting video...");

    // Note that _activity is declared by engine in GameActivity.java
    //
    _activity.runOnUiThread(new Runnable() 
    {
        // Fyber SDK video requests need to be run on the UI thread 
        // to execute correctly
        //
        @Override
        public void run() 
        {

            VirtualCurrencyCallback virtualCurrencyCallback = new VirtualCurrencyCallback() 
            {
              @Override
              public void onSuccess(VirtualCurrencyResponse virtualCurrencyResponse) 
              {
                // Reward your user based on the deltaOfCoins parameter
                String currencyId          = virtualCurrencyResponse.getCurrencyId();
                String currencyName        = virtualCurrencyResponse.getCurrencyName();
                double deltaOfCoins        = virtualCurrencyResponse.getDeltaOfCoins();
                String latestTransactionId = virtualCurrencyResponse.getLatestTransactionId();

                Log.debug("Virtual currency reward request success currencyId:" + currencyId + " currency name:" + currencyName + " delta of coins:" + deltaOfCoins + " transactionId:" + latestTransactionId);

                nativeFyberVirtualCurrencyRewardOnSuccess(currencyId, currencyName, deltaOfCoins, latestTransactionId);
              }
    
              @Override
              public void onRequestError(RequestError requestError) 
              {
                // No reward has been returned, so nothing can be provided to the user
                Log.debug("Virtual currency reward request error: " + requestError.getDescription());

                nativeFyberVirtualCurrencyRewardOnRequestError();
              }

              @Override
              public void onError(VirtualCurrencyErrorResponse virtualCurrencyErrorResponse) 
              {
                String errorCode    = virtualCurrencyErrorResponse.getErrorCode();
                String errorMessage = virtualCurrencyErrorResponse.getErrorMessage();
                String errorType    = "ERROR_OTHER";

                Log.debug("Virtual currency reward error: " + errorCode + " type:" + errorType + " message:" + errorMessage);

                switch (virtualCurrencyErrorResponse.getError())
                {
                    case ERROR_INVALID_RESPONSE:
                        errorType = "ERROR_INVALID_RESPONSE";
                        break;

                    case ERROR_INVALID_RESPONSE_SIGNATURE:
                        errorType = "ERROR_INVALID_RESPONSE_SIGNATURE";
                        break;

                    case SERVER_RETURNED_ERROR:
                        errorType = "SERVER_RETURNED_ERROR";
                        break;

                    case ERROR_OTHER:
                        errorType = "ERROR_OTHER";
                        break;
                }

                nativeFyberVirtualCurrencyRewardOnError(errorCode, errorType, errorMessage);
              }
          };

          VirtualCurrencyRequester virtualCurrencyRequester = VirtualCurrencyRequester.create(virtualCurrencyCallback);

          RewardedVideoRequester.create(new RequestCallback() 
          {
            @Override
            public void onAdAvailable(Intent intent) 
            {
              nativeFyberOnAdAvailable();
              gFyberRewardedVideoIntent = intent;
            }

            @Override
            public void onAdNotAvailable(AdFormat adFormat) 
            {
              nativeFyberOnAdNotAvailable();
              gFyberRewardedVideoIntent = null;
              Log.debug("Request for " + adFormat + " not available");
            }

            @Override
            public void onRequestError(RequestError requestError) 
            {
              nativeFyberOnRequestError();
              gFyberRewardedVideoIntent = null;
              Log.debug("Something went wrong with the request: " + requestError.getDescription());   
            }
          }).withVirtualCurrencyRequester(virtualCurrencyRequester).request(_activity);
        }
    });
}

public void AndroidThunkJava_FyberShowRewardedVideo()
{
  // Will show the last video that was requested
  //
  if (gFyberRewardedVideoIntent != null)
  {          
    _activity.runOnUiThread(new Runnable() 
    {
        @Override
        public void run() 
        {
          nativeFyberShowRewardedVideo();
          startActivityForResult(gFyberRewardedVideoIntent, REWARDED_VIDEO_REQUEST_CODE);
        }
    });
  }
  else
  {
    Log.debug("There is no current intent cached for a rewarded video");
  }
}

</insert>
  </gameActivityClassAdditions>

<gameActivityOnActivityResultAdditions>
    <insert><![CDATA[

// Fyber SDK rewarded video callbacks
//
if (resultCode == RESULT_OK && requestCode == REWARDED_VIDEO_REQUEST_CODE) 
{    
    Log.debug("Rewarded video completed.  Evaluating results...");

    // Check the engagement status
    //
    String engagementResult = data.getStringExtra(RewardedVideoActivity.ENGAGEMENT_STATUS);
    
    if (engagementResult == RewardedVideoActivity.REQUEST_STATUS_PARAMETER_FINISHED_VALUE)
    {
        // The user watched the entire video and will be rewarded
        //
        nativeFyberRewardedVideoFinished();
        Log.debug("The video ad was dismissed because the user completed it");
    }
    else if (engagementResult == "USER_ENGAGED")
    {
        nativeFyberRewardedVideoUserEngaged();
        Log.debug("User engaged with video");
    }
    else if (engagementResult == RewardedVideoActivity.REQUEST_STATUS_PARAMETER_ABORTED_VALUE)
    {
        // The user stopped the video early and will not be rewarded
        //
        nativeFyberRewardedVideoAborted();
        Log.debug("The video ad was dismissed because the user explicitly closed it");
    }
    else if (engagementResult == RewardedVideoActivity.REQUEST_STATUS_PARAMETER_ERROR)
    {
        // An error occurred while showing the video and the user will not be rewarded
        //
        nativeFyberRewardedVideoError();
        Log.debug("The video ad was dismissed error during playing");
    }
    else
    {
        nativeFyberRewardedVideoError();
        Log.debug("An unknown error occurred");
    }
}

    ]]></insert>
</gameActivityOnActivityResultAdditions>
  
  <proguardAdditions>
    <insert>
<![CDATA[
# Fyber

-keep class com.fyber.** { *; }
-dontwarn com.fyber.**
-keep class com.sponsorpay.mediation.** { *;}
-keepattributes JavascriptInterface
-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {
    void setValue(java.lang.String);
}
-keep class android.webkit.JavascriptInterface

-keepattributes SourceFile,LineNumberTable
-keepattributes JavascriptInterface
-keep class com.unity3d.ads.android.**
{ *; }


# google play service
-keep class com.google.android.gms.** { *; }
-dontwarn com.google.android.gms.**

-keep class * extends java.util.ListResourceBundle {
    protected Object[][] getContents();
}

-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {
    public static final *** NULL;
}

-keepnames @com.google.android.gms.common.annotation.KeepName class *
-keepclassmembernames class * {
    @com.google.android.gms.common.annotation.KeepName *;
}

-keepnames class * implements android.os.Parcelable {
    public static final ** CREATOR;
}

#sdkbox
-keep class com.sdkbox.** { *; }
-dontwarn com.sdkbox.**
]]>
    </insert>
  </proguardAdditions>
  
</root>





